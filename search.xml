<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2024/01/14/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a class="link" href="https://hexo.io/">Hexo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>! This is your very first post. Check <a class="link" href="https://hexo.io/docs/">documentation <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link" href="https://hexo.io/docs/troubleshooting.html">troubleshooting <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> or you can ask me on <a class="link" href="https://github.com/hexojs/hexo/issues">GitHub <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link" href="https://hexo.io/docs/writing.html">Writing <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link" href="https://hexo.io/docs/server.html">Server <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link" href="https://hexo.io/docs/generating.html">Generating <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link" href="https://hexo.io/docs/one-command-deployment.html">Deployment <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
  </entry>
  <entry>
    <title>模板</title>
    <url>/2024/01/15/%E6%88%91%E7%9A%84-OI/</url>
    <content><![CDATA[<link href="https://fonts.googlefonts.cn/css?family=Fira+Mono" rel="stylesheet">

<!-- @import "[TOC]" {cmd="toc" depthFrom=1 depthTo=6 orderedList=false} -->

<!-- code_chunk_output -->

<ul>
<li><a href="#%E5%9B%BE%E8%AE%BA">图论</a><ul>
<li><a href="#%E8%BF%9E%E9%80%9A%E6%80%A7">连通性</a><ul>
<li><a href="#%E5%BC%BA%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F">强连通分量</a></li>
<li><a href="#%E7%BC%A9%E7%82%B9">缩点</a></li>
<li><a href="#%E7%82%B9%E5%8F%8C">点双</a></li>
</ul>
</li>
<li><a href="#%E6%9C%80%E7%9F%AD%E8%B7%AF">最短路</a><ul>
<li><a href="#dijkstra">dijkstra</a></li>
</ul>
</li>
<li><a href="#lca">LCA</a><ul>
<li><a href="#%E5%80%8D%E5%A2%9E">倍增</a></li>
<li><a href="#tarjan">Tarjan</a></li>
<li><a href="#%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86">树链剖分</a></li>
</ul>
</li>
<li><a href="#%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F">拓扑排序</a></li>
</ul>
</li>
<li><a href="#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84">数据结构</a><ul>
<li><a href="#%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84---bit">树状数组 - BIT</a></li>
<li><a href="#%E5%B9%B6%E6%9F%A5%E9%9B%86---dsu">并查集 - DSU</a></li>
</ul>
</li>
</ul>
<!-- /code_chunk_output -->



<h1 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h1><h2 id="连通性"><a href="#连通性" class="headerlink" title="连通性"></a>连通性</h2><h3 id="强连通分量"><a href="#强连通分量" class="headerlink" title="强连通分量"></a>强连通分量</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span> <span class="params">(<span class="type">int</span> u)</span> </span>{</span><br><span class="line">    dfn[u] = low[u] = ++tmp;</span><br><span class="line">    st[++top] = u;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = hd[u]; i; i = e[i].nxt) {</span><br><span class="line">        <span class="type">int</span> v = e[i].to;</span><br><span class="line">        <span class="keyword">if</span> (!dfn[v]) {</span><br><span class="line">            <span class="built_in">tarjan</span> (v);</span><br><span class="line">            low[u] = <span class="built_in">min</span> (low[u], low[v]);</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (!bel[v]) low[u] = <span class="built_in">min</span> (low[u], dfn[v]);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (dfn[u] == low[u]) {</span><br><span class="line">        siz[++idx] = <span class="number">1</span>;</span><br><span class="line">        bel[u] = idx;</span><br><span class="line">        <span class="keyword">while</span> (st[top] != u) {</span><br><span class="line">            bel[st[top]] = idx;</span><br><span class="line">            siz[idx]++;</span><br><span class="line">            top--;</span><br><span class="line">        }</span><br><span class="line">        top--;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="缩点"><a href="#缩点" class="headerlink" title="缩点"></a>缩点</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= m; i ++) {</span><br><span class="line">    <span class="keyword">if</span> (bel[x[i]] != bel[y[i]]) {</span><br><span class="line">        <span class="built_in">add</span> (bel[x[i]], bel[y[i]], W[i]);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h3 id="点双"><a href="#点双" class="headerlink" title="点双"></a>点双</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> low[M], dfn[M], st[M], top, tmp, idx;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; G[M], dc, dcc[M]; <span class="comment">// dcc: 点双 dc：割点 G: 图</span></span><br><span class="line"><span class="type">bool</span> mark[M];<span class="comment">// 是否为割点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> root)</span> </span>{</span><br><span class="line">	dfn[u] = low[u] = ++ tmp;</span><br><span class="line">	st[++ top] = u;</span><br><span class="line">	<span class="type">int</span> chi = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> v : G[u]) {</span><br><span class="line">		<span class="keyword">if</span>(!dfn[v]) {</span><br><span class="line">			chi ++;</span><br><span class="line">			<span class="built_in">tarjan</span>(v, root);</span><br><span class="line">			low[u] = <span class="built_in">min</span>(low[u], low[v]);</span><br><span class="line">			<span class="keyword">if</span>((low[v] &gt;= dfn[u] &amp;&amp; u != root &amp;&amp; !mark[u]) || (u == root &amp;&amp; chi &gt;= <span class="number">2</span>)) {</span><br><span class="line">				mark[u] = <span class="number">1</span>;</span><br><span class="line">				dc.<span class="built_in">push_back</span>(u);</span><br><span class="line">			}</span><br><span class="line">			<span class="keyword">if</span>(low[v] &gt;= dfn[u]) {</span><br><span class="line">				idx ++;</span><br><span class="line">				<span class="keyword">do</span>{</span><br><span class="line">					<span class="type">int</span> w = st[top --];</span><br><span class="line">					dcc[idx].<span class="built_in">push_back</span>(w);</span><br><span class="line">				}<span class="keyword">while</span>(st[top + <span class="number">1</span>] != v);</span><br><span class="line">				dcc[idx].<span class="built_in">push_back</span>(u);</span><br><span class="line">			}</span><br><span class="line">		} <span class="keyword">else</span> low[u] = <span class="built_in">min</span>(low[u], dfn[v]);</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="最短路"><a href="#最短路" class="headerlink" title="最短路"></a>最短路</h2><h3 id="dijkstra"><a href="#dijkstra" class="headerlink" title="dijkstra"></a>dijkstra</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> {</span><br><span class="line">    <span class="type">int</span> dis, u;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&gt;(<span class="type">const</span> node&amp; a)<span class="type">const</span> {</span><br><span class="line">        <span class="keyword">return</span> dis &gt; a.dis;</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"><span class="type">int</span> dis[M];</span><br><span class="line">priority_queue&lt;node, vector&lt;node&gt;, greater&lt;node&gt; &gt;q;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="type">int</span> s)</span> </span>{</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">0x3f3f3f3f</span>, <span class="keyword">sizeof</span> dis);</span><br><span class="line">    dis[s] = <span class="number">0</span>;</span><br><span class="line">    q.<span class="built_in">push</span>({<span class="number">0</span>, s});</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) {</span><br><span class="line">        <span class="type">int</span> u = q.<span class="built_in">top</span>().u;</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (vis[u]) <span class="keyword">continue</span>;</span><br><span class="line">        vis[u] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = hd[u];i;i = e[i].nxt){</span><br><span class="line">            <span class="type">int</span> v = e[i].to,w = e[i].w;</span><br><span class="line">            <span class="keyword">if</span> (dis[v] &gt; dis[u] + w) {</span><br><span class="line">                dis[v] = dis[u] + w;</span><br><span class="line">                q.<span class="built_in">push</span>({dis[v], v});</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<h2 id="LCA"><a href="#LCA" class="headerlink" title="LCA"></a>LCA</h2><h3 id="倍增"><a href="#倍增" class="headerlink" title="倍增"></a>倍增</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> f)</span> </span>{</span><br><span class="line">    fa[u][<span class="number">0</span>] = f, dep[u] = dep[f] + <span class="number">1</span>, vis[u] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; ; i ++) {</span><br><span class="line">        fa[u][i] = fa[fa[u][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">        ma[u][i] = <span class="built_in">min</span>(ma[fa[u][i - <span class="number">1</span>]][i - <span class="number">1</span>] , ma[u][i - <span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">if</span> (fa[u][i] == <span class="number">0</span>) {</span><br><span class="line">            k = <span class="built_in">max</span>(k, i - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : g[u]) {</span><br><span class="line">        <span class="keyword">if</span> (v.to != f) {</span><br><span class="line">            ma[v.to][<span class="number">0</span>] = v.w;</span><br><span class="line">            <span class="built_in">dfs</span>(v.to, u);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span></span>{</span><br><span class="line">    <span class="keyword">if</span>(dep[u] &lt; dep[v]) <span class="built_in">swap</span>(u, v);</span><br><span class="line">    <span class="type">int</span> x = u, y = v;</span><br><span class="line">    <span class="type">int</span> lu = INF, lv = INF;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = k; i &gt;= <span class="number">0</span>; i --){</span><br><span class="line">        <span class="keyword">if</span>(dep[fa[u][i]] &gt;= dep[v])  lu = <span class="built_in">min</span>(ma[u][i], lu), u = fa[u][i];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span>(u == v) <span class="keyword">return</span> <span class="built_in">min</span>(lu, lv);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = k; i &gt;= <span class="number">0</span>; i --){</span><br><span class="line">        <span class="keyword">if</span>(fa[u][i] != fa[v][i]) lu = <span class="built_in">min</span>(ma[u][i], lu), u = fa[u][i], lv = <span class="built_in">min</span>(ma[v][i], lv), v = fa[v][i];</span><br><span class="line">    }</span><br><span class="line">    lu = <span class="built_in">min</span>(ma[u][<span class="number">0</span>], lu), lv = <span class="built_in">min</span>(ma[v][<span class="number">0</span>], lv);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">min</span>(lu, lv);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<h3 id="Tarjan"><a href="#Tarjan" class="headerlink" title="Tarjan"></a>Tarjan</h3><h3 id="树链剖分"><a href="#树链剖分" class="headerlink" title="树链剖分"></a>树链剖分</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> dep[N], f[N], top[N], son[N], siz[N], hv[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span> <span class="params">(<span class="type">int</span> u, <span class="type">int</span> fa)</span> </span>{</span><br><span class="line">	dep[u] = dep[fa] + <span class="number">1</span>, f[u] = fa, siz[u] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> v : G[u]) {</span><br><span class="line">		<span class="keyword">if</span> (v != fa) {</span><br><span class="line">			<span class="built_in">dfs1</span> (v, u);</span><br><span class="line">			siz[u] += siz[v];</span><br><span class="line">			<span class="keyword">if</span> (siz[son[u]] &lt; siz[v]) son[u] = v;</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">	hv[son[u]] = <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span> <span class="params">(<span class="type">int</span> u, <span class="type">int</span> fa)</span> </span>{</span><br><span class="line">	<span class="keyword">if</span> (hv[u]) top[u] = top[fa];</span><br><span class="line">	<span class="keyword">else</span> top[u] = u;</span><br><span class="line">	<span class="keyword">if</span> (!son[u]) <span class="keyword">return</span>;</span><br><span class="line">	<span class="built_in">dfs2</span>(son[u], u);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> v : G[u]) {</span><br><span class="line">		<span class="keyword">if</span> (v != son[u] &amp;&amp; v != fa)</span><br><span class="line">			<span class="built_in">dfs2</span>(v, u);</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lca</span> <span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>{</span><br><span class="line">	<span class="keyword">while</span> (top[u] != top[v]) {</span><br><span class="line">		<span class="keyword">if</span> (dep[top[u]] &gt; dep[top[v]]) u = f[top[u]];</span><br><span class="line">		<span class="keyword">else</span> v = f[top[v]];</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">return</span> dep[u] &lt; dep[v] ? u : v;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h2><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></div>

<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="树状数组-BIT"><a href="#树状数组-BIT" class="headerlink" title="树状数组 - BIT"></a>树状数组 - BIT</h2><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">BIT</span> {</span><br><span class="line">    <span class="type">int</span> c[N], maxn;</span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> l(x) x &amp; -x</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span> <span class="params">(<span class="type">int</span> x, <span class="type">int</span> d)</span> </span>{<span class="keyword">for</span> (<span class="type">int</span> i = x; i &lt;= maxn; i += <span class="built_in">l</span>(i)) c[i] += d;}</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">sum</span> <span class="params">(<span class="type">int</span> x)</span> </span>{</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = x; i; i -= <span class="built_in">l</span>(i)) res += c[i];</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></table></figure></div>

<h2 id="并查集-DSU"><a href="#并查集-DSU" class="headerlink" title="并查集 - DSU"></a>并查集 - DSU</h2><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">DSU</span> {</span><br><span class="line">    <span class="type">int</span> f[N], siz[N];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span> <span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) f[i] = i, siz[i] = <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span> <span class="params">(<span class="type">int</span> x)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(f[x] != x) f[x] = <span class="built_in">find</span>(f[x]);</span><br><span class="line">        <span class="keyword">return</span> f[x];</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">move</span> <span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>{</span><br><span class="line">        x = <span class="built_in">find</span>(x), y = <span class="built_in">find</span>(y);</span><br><span class="line">        <span class="keyword">if</span>(siz[x] &gt; siz[y]) <span class="built_in">swap</span>(x, y); <span class="comment">// 启发式合并</span></span><br><span class="line">        <span class="keyword">if</span>(x != y) {</span><br><span class="line">            f[x] = y;</span><br><span class="line">            siz[y] += siz[x];</span><br><span class="line">            siz[x] = <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>OI</tag>
        <tag>模板</tag>
        <tag>C++</tag>
      </tags>
  </entry>
</search>
